import math

# За день машина проезжает n километров. Сколько дней нужно, чтобы проехать маршрут длиной m километров? При решении этой задачи нельзя пользоваться условной инструкцией if и циклами.
# Input:
# n = 700
# m = 750


def First():
    n = 700
    m = 750
    a=  int(math.ceil(m/n))
    print(a)
    
# First()

# В некоторой школе решили набрать три новых математических класса и оборудовать кабинеты для них новыми партами. 
# За каждой партой может сидеть два учащихся. 
# Известно количество учащихся в каждом из трех классов. 
# Выведите наименьшее число парт, которое нужно приобрести для них.
# Input: 20 21 22(ввод чисел НЕ в одну строку)
# Output: 32

def classroom():
    class_a = int(input())
    class_b = int(input())
    class_c = int(input())
    
    p1 = int(class_a / 2) + (class_a % 2)
    p2 = int(class_b / 2) + (class_b % 2)
    p3 = int(class_c / 2) + (class_c % 2)
    
    print(p1+p2+p3)

    
# classroom()


# Вагоны в электричке пронумерованы натуральными числами,
# начиная с 1 (при этом иногда вагоны нумеруются от «головы» поезда, а иногда – с «хвоста»;
# это зависит от того, в какую сторону едет электричка). 
# В каждом вагоне написан его номер. Витя сел в i-й вагон от головы поезда и обнаружил, что его вагон имеет номер j. 
# Он хочет определить, сколько всего вагонов в электричке. Напишите программу, которая будет это делать или сообщать,
# что без дополнительной информации это сделать невозможно.

# Input: 3 4(ввод на разных строках)
# Output: 6


def train():
    i = int(input())
    j = int(input())
    
    if(i == j):
        print("no")
    else: 
        print(i + j - 1)


# train()



# Дано натуральное число. Требуется определить, является ли год с данным номером високосным. 
# Если год является високосным, то выведите YES, иначе выведите NO. 
# Напомним, что в соответствии с григорианским календарем, год является високосным, если его номер кратен 4, но не кратен 100, 
# а также если он кратен 400.
# Input: 2016
# Output: YES

def year():
    a = int(input())
    
    if(a % 4 == 0 and a % 100 != 0 or a % 400 == 0 ):
        print("y")
    else:
        print("no")
        
# year()





# Шахматный король ходит по горизонтали, вертикали и диагонали, но только на 1 клетку. 
# Даны две различные клетки шахматной доски, определите, может ли король попасть с первой клетки на вторую одним ходом. 
# Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки,
# потом для второй клетки. Программа должна вывести YES, 
# если из первой клетки ходом короля можно попасть во вторую или NO в противном случае. 
# В случае, если хотя бы одно из введенных чисел не лежит в диапазоне от 1 до 8, выведите строку "Ошибка!".



def checkInput(king_v, king_g, next_turn_v, next_turn_g):
    if(king_v in range(1,9) and
       king_g in range(1,9) and
       next_turn_v in range(1,9) and 
       next_turn_g in range(1,9)):
        return True
    else: return False 

def chess():
    
    king_v = int(input())
    king_g = int(input())

    next_turn_v = int(input())
    next_turn_g = int(input())
    
    if(checkInput(king_v, king_g, next_turn_v, next_turn_g)):
        if(abs(next_turn_v - king_v) <= 1 and abs(next_turn_g - king_g) <= 1 ):
            print("y")
        else: 
            print("no!")
        
    else: print("no")


# chess()




# Треугольник существует только тогда, когда сумма любых двух его сторон больше третьей. 
# Дано a, b, c - стороны предполагаемого треугольника.
# Требуется сравнить длину каждого отрезка-стороны с суммой двух других. 
# Если хотя бы в одном случае отрезок окажется больше суммы двух других, то треугольника с такими сторонами не существует.


def rectangle():
    a = int(input())
    b = int(input())
    c = int(input())
    
    if (a+b) > c and (a+c) > b and (b+c) > a:
        print("exist")
    else:
        print("not") 
        
# rectangle()
